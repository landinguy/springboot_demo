package com.example.demo.others.Thread;

import java.util.concurrent.locks.ReentrantLock;

/**
 * @author landing guy
 * @date 2020.09.04
 */
public class ThreadLocalDemo {

    //ThreadLocal对变量进行包装，达到线程间隔离的目的
    static ThreadLocal<Integer> local = new ThreadLocal() {
        @Override
        protected Object initialValue() {
            return 0;
        }
    };

    public static void main(String[] args) {
        Thread[] threads = new Thread[5];
        for (int i = 0; i < 5; i++) {
            threads[i] = new Thread(() -> {
                Integer num = local.get() + 5;
                local.set(num);
                System.out.println(Thread.currentThread().getName() + " -> " + local.get());
            });
        }

        for (int i = 0; i < 5; i++) {
            threads[i].start();
        }

        ReentrantLock lock = new ReentrantLock();
        lock.lock();
    }

}